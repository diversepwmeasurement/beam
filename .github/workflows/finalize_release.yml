env:
  DEVELOCITY_ACCESS_KEY: ${{ secrets.GE_ACCESS_TOKEN }}
  GRADLE_ENTERPRISE_CACHE_PASSWORD: ${{ secrets.GE_CACHE_PASSWORD }}
  GRADLE_ENTERPRISE_CACHE_USERNAME: ${{ secrets.GE_CACHE_USERNAME }}
jobs:
  publish_python_artifacts:
    if: ${{github.event.inputs.PUBLISH_PYTHON_ARTIFACTS == 'yes'}}
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      name: Checkout
      uses: actions/checkout@v4
    - continue-on-error: true
      name: Mask PyPi password
      run: '# Workaround for Actions bug - https://github.com/actions/runner/issues/643

        PYPI_PASSWORD=$(jq -r ''.inputs.PYPI_PASSWORD'' $GITHUB_EVENT_PATH)

        echo "::add-mask::$PYPI_PASSWORD"

        '
    - continue-on-error: true
      name: Validate PyPi id/password
      run: "echo \"::add-mask::${{ github.event.inputs.PYPI_API_TOKEN }}\"\nif [ \"\
        ${{ github.event.inputs.PYPI_API_TOKEN }}\" == \"\" ]\nthen\n  echo \"Must\
        \ provide a PyPi password to publish artifacts to PyPi\"\n  exit 1\nfi\n"
    - continue-on-error: true
      name: Setup environment
      uses: ./.github/actions/setup-environment-action
      with:
        python-version: 3.11
    - continue-on-error: true
      name: Install dependencies
      run: 'pip install python-dateutil

        pip install requests

        pip install twine

        '
    - continue-on-error: true
      env:
        RELEASE: ${{ github.event.inputs.RELEASE }}
      name: Deploy to Pypi
      run: 'wget -r --no-parent -A tar.gz,whl "https://dist.apache.org/repos/dist/dev/beam/${RELEASE}/python"

        cd "dist.apache.org/repos/dist/dev/beam/${RELEASE}/python/"

        echo "Will upload the following files to PyPI:"

        ls

        twine upload * -u __token__ -p "${{ github.event.inputs.PYPI_API_TOKEN }}"

        '
  push_docker_artifacts:
    if: ${{github.event.inputs.PUSH_DOCKER_ARTIFACTS == 'yes'}}
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        password: ${{ secrets.DOCKERHUB_TOKEN }}
        username: ${{ secrets.DOCKERHUB_USER }}
    - continue-on-error: true
      env:
        RC_NUM: ${{ github.event.inputs.RC }}
        RC_VERSION: rc${{ github.event.inputs.RC }}
        RELEASE: ${{ github.event.inputs.RELEASE }}
      name: Publish to Docker
      run: "\necho \"Publish SDK docker images to Docker Hub.\"\n\necho \"================Pull\
        \ RC Containers from DockerHub===========\"\nIMAGES=$(docker search apache/beam_\
        \ --format \"{{.Name}}\" --limit 100)\nKNOWN_IMAGES=()\necho \"We are using\
        \ ${RC_VERSION} to push docker images for ${RELEASE}.\"\nwhile read IMAGE;\
        \ do\n  # Try pull verified RC from dockerhub.\n  if docker pull \"${IMAGE}:${RELEASE}${RC_VERSION}\"\
        \ 2>/dev/null ; then\n    KNOWN_IMAGES+=( $IMAGE )\n  fi\ndone < <(echo \"\
        ${IMAGES}\")\n\necho \"================Confirming Release and RC version===========\"\
        \necho \"Publishing the following images:\"\n# Sort by name for easy examination\n\
        IFS=$'\\n' KNOWN_IMAGES=($(sort <<<\"${KNOWN_IMAGES[*]}\"))\nunset IFS\nprintf\
        \ \"%s\\n\" ${KNOWN_IMAGES[@]}\n\nfor IMAGE in \"${KNOWN_IMAGES[@]}\"; do\n\
        \  # Perform a carbon copy of ${RC_VERSION} to dockerhub with a new tag as\
        \ ${RELEASE}.\n  docker buildx imagetools create --tag \"${IMAGE}:${RELEASE}\"\
        \ \"${IMAGE}:${RELEASE}${RC_VERSION}\"\n\n  # Perform a carbon copy of ${RC_VERSION}\
        \ to dockerhub with a new tag as latest.\n  docker buildx imagetools create\
        \ --tag \"${IMAGE}:latest\" \"${IMAGE}:${RELEASE}\"\ndone\n"
  push_git_tags:
    if: ${{github.event.inputs.TAG_RELEASE == 'yes'}}
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      name: Checkout
      uses: actions/checkout@v4
    - continue-on-error: true
      name: Set git config
      run: 'git config user.name $GITHUB_ACTOR

        git config user.email actions@"$RUNNER_NAME".local

        '
    - continue-on-error: true
      id: import_gpg
      name: Import GPG key
      uses: crazy-max/ghaction-import-gpg@111c56156bcc6918c056dbef52164cfa583dc549
      with:
        gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
    - continue-on-error: true
      env:
        RC_TAG: v${{ github.event.inputs.RELEASE }}-RC${{ github.event.inputs.RC }}
        VERSION_TAG: v${{ github.event.inputs.RELEASE }}
      name: Push tags
      run: '# Ensure local tags are in sync. If there''s a mismatch, it will tell
        you.

        git fetch --all --tags --prune


        # If the tag exists, a commit number is produced, otherwise there''s an error.

        git rev-list $RC_TAG -n 1


        # Tag for Go SDK

        git tag "sdks/$VERSION_TAG" "$RC_TAG" -m "Tagging release" --local-user="${{steps.import_gpg.outputs.name}}"

        git push https://github.com/apache/beam "sdks/$VERSION_TAG"


        # Tag for repo root.

        git tag "$VERSION_TAG" "$RC_TAG" -m "Tagging release" --local-user="${{steps.import_gpg.outputs.name}}"

        git push https://github.com/apache/beam "$VERSION_TAG"

        '
name: finalize_release
on:
  repository_dispatch:
    types: trigger-ga___finalize_release.yml
permissions:
  contents: write
  pull-requests: write
