env:
  DEVELOCITY_ACCESS_KEY: ${{ secrets.GE_ACCESS_TOKEN }}
  GRADLE_ENTERPRISE_CACHE_PASSWORD: ${{ secrets.GE_CACHE_PASSWORD }}
  GRADLE_ENTERPRISE_CACHE_USERNAME: ${{ secrets.GE_CACHE_USERNAME }}
jobs:
  beam_site_pr:
    env:
      BEAM_ROOT_DIR: ${{ github.workspace }}/beam
      BRANCH_NAME: updates_release_${{ github.event.inputs.RELEASE }}
      RC_TAG: v${{ github.event.inputs.RELEASE }}-RC${{ github.event.inputs.RC }}
      SITE_ROOT_DIR: ${{ github.workspace }}/beam-site
    if: ${{ fromJson(github.event.inputs.STAGE).beam_site_pr == 'yes'}}
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      name: Checkout Beam Repo
      uses: actions/checkout@v4
      with:
        path: beam
        ref: v${{ github.event.inputs.RELEASE }}-RC${{ github.event.inputs.RC }}
        repository: apache/beam
    - continue-on-error: true
      name: Checkout Beam Site Repo
      uses: actions/checkout@v4
      with:
        path: beam-site
        ref: release-docs
        repository: apache/beam-site
        token: ${{ github.event.inputs.REPO_TOKEN }}
    - continue-on-error: true
      name: Install Python 3.8
      uses: actions/setup-python@v5
      with:
        python-version: '3.8'
    - continue-on-error: true
      name: Install node
      uses: actions/setup-node@v4
      with:
        node-version: '16'
    - continue-on-error: true
      name: Install Java 8
      uses: actions/setup-java@v4
      with:
        distribution: temurin
        java-version: '8'
    - continue-on-error: true
      name: Remove default github maven configuration
      run: rm ~/.m2/settings.xml || true
    - continue-on-error: true
      name: Create documentation commit for website
      run: 'echo "OK!"

        '
    - continue-on-error: true
      name: Build Python Docs
      run: 'pip install --upgrade pip setuptools wheel

        pip install -U pip

        pip install tox

        # TODO(https://github.com/apache/beam/issues/20209): Don''t hardcode py version
        in this file.

        tox -e docs

        rm -rf target/docs/_build/.doctrees

        '
      working-directory: beam/sdks/python
    - continue-on-error: true
      name: Build Typescript Docs
      run: 'npm ci && npm run docs

        '
      working-directory: beam/sdks/typescript
    - continue-on-error: true
      name: Build Java Docs
      run: './gradlew :sdks:java:javadoc:aggregateJavadoc -PisRelease --no-daemon
        --no-parallel

        '
      working-directory: beam
    - continue-on-error: true
      name: Build YAML Docs
      run: './gradlew :sdks:python:generateYamlDocs -PisRelease

        '
      working-directory: beam
    - continue-on-error: true
      name: Add canonical link into javadocs
      uses: cicirello/javadoc-cleanup@v1
      with:
        base-url-path: https://beam.apache.org/releases/javadoc/current/
        path-to-root: beam/sdks/java/javadoc/build/docs/javadoc
    - continue-on-error: true
      name: Consolidate Release Docs to beam-site branch with symlinks
      run: 'git checkout -b $BRANCH_NAME release-docs


        echo "..........Copying generated javadoc into beam-site.........."

        cp -r ${BEAM_ROOT_DIR}/sdks/java/javadoc/build/docs/javadoc/ javadoc/${{ github.event.inputs.RELEASE
        }}

        # Update current symlink to point to the latest release

        unlink javadoc/current

        ln -s ${{ github.event.inputs.RELEASE }} javadoc/current


        echo "............Copying generated pydoc into beam-site.........."

        cp -r ${BEAM_ROOT_DIR}/sdks/python/target/docs/_build pydoc/${{  github.event.inputs.RELEASE
        }}

        # Update current symlink to point to the latest release

        unlink pydoc/current

        ln -s ${{ github.event.inputs.RELEASE }} pydoc/current


        echo "............Copying generated typedoc into beam-site.........."

        mkdir -p typedoc

        cp -r ${BEAM_ROOT_DIR}/sdks/typescript/docs typedoc/${{ github.event.inputs.RELEASE
        }}

        # Update current symlink to point to the latest release

        unlink typedoc/current | true

        ln -s ${{ github.event.inputs.RELEASE }} typedoc/current


        echo "............Copying generated yamldoc into beam-site.........."

        mkdir -p yamldoc/${{ github.event.inputs.RELEASE }}

        cp -r ${BEAM_ROOT_DIR}/sdks/python/build/yaml-ref.html yamldoc/${{ github.event.inputs.RELEASE
        }}/index.html

        # Update current symlink to point to the latest release

        unlink yamldoc/current | true

        ln -s ${{ github.event.inputs.RELEASE }} yamldoc/current

        '
      working-directory: beam-site
    - continue-on-error: true
      name: Create commit on beam-site branch
      run: '# Get the commit from the beam repo, not the beam-site repo.

        RELEASE_COMMIT=$(git rev-list -n 1 "tags/${RC_TAG}")

        cd ${SITE_ROOT_DIR}

        git config user.name $GITHUB_ACTOR

        git config user.email actions@"$RUNNER_NAME".local

        git add -A

        git commit -m "Update beam-site for release ${{ github.event.inputs.RELEASE
        }}." -m "Content generated from commit ${RELEASE_COMMIT}."

        git push -f --set-upstream origin $BRANCH_NAME

        '
      working-directory: beam
    - continue-on-error: true
      env:
        GH_TOKEN: ${{ github.event.inputs.REPO_TOKEN }}
        PR_BODY: Content generated from https://github.com/apache/beam/tree/${{ env.RC_TAG
          }}.
        PR_TITLE: Publish docs for ${{ github.event.inputs.RELEASE }} release
      name: Create beam-site PR
      run: 'gh pr create -t "$PR_TITLE" -b "$PR_BODY" --base release-docs

        '
      working-directory: beam-site
  build_and_stage_prism:
    if: ${{ fromJson(github.event.inputs.STAGE).prism == 'yes'}}
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      name: Checkout
      uses: actions/checkout@v4
      with:
        ref: v${{ github.event.inputs.RELEASE }}-RC${{ github.event.inputs.RC }}
        repository: apache/beam
    - continue-on-error: true
      name: Mask Apache Password
      run: '# Workaround for Actions bug - https://github.com/actions/runner/issues/643

        APACHE_PASS=$(jq -r ''.inputs.APACHE_PASSWORD'' $GITHUB_EVENT_PATH)

        echo "::add-mask::$APACHE_PASS"

        '
    - continue-on-error: true
      name: Mask apache id/password
      run: "if [ \"${{ github.event.inputs.APACHE_ID }}\" == \"\" ]\nthen\n  echo\
        \ \"Must provide an apache id to stage artifacts to https://dist.apache.org/repos/dist/dev/beam/\"\
        \nfi\nif [ \"${{ github.event.inputs.APACHE_PASSWORD }}\" == \"\" ]\nthen\n\
        \  echo \"Must provide an apache password to stage artifacts to https://dist.apache.org/repos/dist/dev/beam/\"\
        \nfi\n"
    - continue-on-error: true
      uses: actions/setup-go@v5
      with:
        cache-dependency-path: 'sdks/go.sum

          '
        go-version: '1.22'
    - continue-on-error: true
      id: import_gpg
      name: Import GPG key
      uses: crazy-max/ghaction-import-gpg@111c56156bcc6918c056dbef52164cfa583dc549
      with:
        gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
    - continue-on-error: true
      env:
        GH_TOKEN: ${{ github.event.inputs.REPO_TOKEN  }}
        GIT_REPO_BASE_URL: https://github.com/apache/beam
        RC_TAG: v${{ github.event.inputs.RELEASE }}-RC${{ github.event.inputs.RC }}
        RELEASE: ${{ github.event.inputs.RELEASE }}
        RELEASE_DIR: beam/${{ github.event.inputs.RELEASE }}
        SVN_ARTIFACTS_DIR: beam/${{ github.event.inputs.RELEASE }}/prism
      name: Build prism artifacts
      run: "# TODO stop the action if a non-prerelease release exists\n# TODO create\
        \ the draft release automatically if none exist.\n# TODO update the draft\
        \ release's RC tag to current.\n\nexport GH_RELEASE_ID=`gh api \\\n -H \"\
        Accept: application/vnd.github+json\" \\\n -H \"X-GitHub-Api-Version: 2022-11-28\"\
        \ \\\n /repos/apache/beam/releases | jq '.[] | select(.tag_name | contains(env.RC_TAG))\
        \ .id'`\n\necho \"with gh release id $GH_RELEASE_ID for tag $RC_TAG\"\n\n\
        # Store a reference so we can get back to the start.\nROOT_DIR=`pwd`\necho\
        \ \"ROOT_DIR=$ROOT_DIR\"\necho \"............Checking out Apache Dev Repo..........\"\
        \n\nsvn co https://dist.apache.org/repos/dist/dev/beam\nmkdir -p \"${SVN_ARTIFACTS_DIR}\"\
        \n\nOUTPUT_DIR=$ROOT_DIR/$SVN_ARTIFACTS_DIR\nmkdir -p $OUTPUT_DIR\necho \"\
        OUTPUT_DIR=$OUTPUT_DIR\"\n\n# Remove existing prism contents from the svn\
        \ repo.\ncd $OUTPUT_DIR\nrm -rf *\ncd $ROOT_DIR\n\n# Navigate to the prism\
        \ command directory.\ncd sdks/go/cmd/prism\n\n# Store a reference to where\
        \ we're building from.\nBUILD_DIR=`pwd`\n\necho \"............Build and stage\
        \ prism artifacts in the Github Release $GH_RELEASE_ID for tag $RC_TAG..........\"\
        \n\n\n# Loop through and build desired set from allowed types.\nfor OS in\
        \ linux windows darwin; do\n  for ARCH in amd64 arm64; do\n    TARGET_DIR=\"\
        $OUTPUT_DIR/$OS/$ARCH\"\n    TARGET_NAME=\"apache_beam-v$RELEASE-prism-$OS-$ARCH\"\
        \n\n    mkdir -p \"$TARGET_DIR\"\n    OUTPUT_FILE=\"$TARGET_DIR/$TARGET_NAME\"\
        \n    if GOOS=$OS GOARCH=$ARCH CGO_ENABLED=0 go build -trimpath -buildvcs=false\
        \ -o \"$OUTPUT_FILE\" . > /dev/null 2>&1; then\n      cd $TARGET_DIR\n   \
        \   # Extract real output name. Windows builds automatically have .exe added.\n\
        \      ARTIFACT=`ls`\n      echo \"target built - $ARTIFACT\"\n\n      ZIP_NAME=\"\
        $ARTIFACT.zip\"\n      zip -r $ZIP_NAME $ARTIFACT\n\n      # Sign and hash\n\
        \      gpg --local-user \"${{steps.import_gpg.outputs.name}}\" --armor --batch\
        \ --yes --detach-sig $ZIP_NAME\n      sha512sum $ZIP_NAME > \"${ZIP_NAME}.sha512\"\
        \n\n      # Upload to the release.\n      gh release upload $RC_TAG $ZIP_NAME\
        \ ${ZIP_NAME}.sha512 ${ZIP_NAME}.asc --clobber\n\n      # Remove the binary\
        \ from the release directory\n      rm $ARTIFACT\n\n      # Return to our\
        \ root build dir.\n      cd $BUILD_DIR\n    else\n      echo \"target failed\
        \ for $OS - $ARCH\"\n      rm -f \"$OUTPUT_FILE\"\n      exit 1 # Do not continue\
        \ action\n    fi\n  done\ndone\necho \"...........Prism builds done!...........\"\
        \ncd $ROOT_DIR\ncd $RELEASE_DIR\n\necho \"...........Adding prism artifacts\
        \ to the Dev Apache SVN repo...........\"\n\nsvn add --force --parents prism\n\
        svn status\nsvn commit -m \"Staging Prism artifacts for Apache Beam ${RELEASE}\
        \ RC${RC_NUM}\" --non-interactive --username \"${{ github.event.inputs.APACHE_ID\
        \ }}\" --password \"${{ github.event.inputs.APACHE_PASSWORD }}\"\n"
  publish_java_artifacts:
    if: ${{ fromJson(github.event.inputs.STAGE).java_artifacts == 'yes'}}
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      name: Checkout
      uses: actions/checkout@v4
      with:
        ref: v${{ github.event.inputs.RELEASE }}-RC${{ github.event.inputs.RC }}
        repository: apache/beam
    - continue-on-error: true
      name: Install Java 8
      uses: actions/setup-java@v4
      with:
        distribution: temurin
        java-version: '8'
    - continue-on-error: true
      id: import_gpg
      name: Import GPG key
      uses: crazy-max/ghaction-import-gpg@111c56156bcc6918c056dbef52164cfa583dc549
      with:
        gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
    - continue-on-error: true
      name: Auth for nexus
      run: "mkdir -p ${HOME}/.m2\necho \"<settings>\n <servers>\n   <server>\n   \
        \  <id>apache.releases.https</id>\n     <username>${{ secrets.NEXUS_STAGE_DEPLOYER_USER\
        \ }}</username>\n     <password>${{ secrets.NEXUS_STAGE_DEPLOYER_PW }}</password>\n\
        \   </server>\n   <server>\n     <id>apache.snapshots.https</id>\n     <username>${{\
        \ secrets.NEXUS_USER }}</username>\n     <password>${{ secrets.NEXUS_PW }}</password>\n\
        \   </server>\n </servers>\n</settings>\" > ${HOME}/.m2/settings.xml\n"
    - continue-on-error: true
      name: Configure git
      run: git config credential.helper store
    - continue-on-error: true
      name: Stage Java Artifacts into Maven
      run: ./gradlew publish -Psigning.gnupg.keyName=${{steps.import_gpg.outputs.fingerprint}}
        -PisRelease --no-daemon --no-parallel
  stage_docker:
    if: ${{ fromJson(github.event.inputs.STAGE).docker_artifacts == 'yes'}}
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      name: Checkout
      uses: actions/checkout@v4
      with:
        ref: v${{ github.event.inputs.RELEASE }}-RC${{ github.event.inputs.RC }}
        repository: apache/beam
    - continue-on-error: true
      name: Free Disk Space (Ubuntu)
      uses: jlumbroso/free-disk-space@v1.3.0
    - continue-on-error: true
      name: Install Java 11
      uses: actions/setup-java@v4
      with:
        distribution: temurin
        java-version: '11'
    - continue-on-error: true
      name: Install Python 3.8
      uses: actions/setup-python@v5
      with:
        python-version: '3.8'
    - continue-on-error: true
      run: echo $JAVA_HOME
    - continue-on-error: true
      id: export-java11
      run: echo "JAVA11_HOME=${JAVA_HOME}" >> "$GITHUB_OUTPUT"
    - continue-on-error: true
      name: Install Java 8
      uses: actions/setup-java@v4
      with:
        distribution: temurin
        java-version: '8'
    - continue-on-error: true
      name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    - continue-on-error: true
      name: Remove default github maven configuration
      run: rm ~/.m2/settings.xml || true
    - continue-on-error: true
      name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        password: ${{ secrets.DOCKERHUB_TOKEN }}
        username: ${{ secrets.DOCKERHUB_USER }}
    - continue-on-error: true
      name: Push docker images
      run: ./gradlew :pushAllDockerImages -PisRelease -Pdocker-pull-licenses -Pprune-images
        -Pdocker-tag=${{ github.event.inputs.RELEASE }}rc${{ github.event.inputs.RC
        }} -Pjava11Home=${{steps.export-java11.outputs.JAVA11_HOME}} --no-daemon --no-parallel
  stage_java_source:
    if: ${{ fromJson(github.event.inputs.STAGE).java_source == 'yes'}}
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      name: Mask Apache Password
      run: '# Workaround for Actions bug - https://github.com/actions/runner/issues/643

        APACHE_PASS=$(jq -r ''.inputs.APACHE_PASSWORD'' $GITHUB_EVENT_PATH)

        echo "::add-mask::$APACHE_PASS"

        '
    - continue-on-error: true
      name: Validate apache id/password
      run: "if [ \"${{ github.event.inputs.APACHE_ID }}\" == \"\" ]\nthen\n  echo\
        \ \"Must provide an apache id to stage artifacts to https://dist.apache.org/repos/dist/dev/beam/\"\
        \nfi\nif [ \"${{ github.event.inputs.APACHE_PASSWORD }}\" == \"\" ]\nthen\n\
        \  echo \"Must provide an apache password to stage artifacts to https://dist.apache.org/repos/dist/dev/beam/\"\
        \nfi\n"
    - continue-on-error: true
      name: Install Java 8
      uses: actions/setup-java@v4
      with:
        distribution: temurin
        java-version: '8'
    - continue-on-error: true
      id: import_gpg
      name: Import GPG key
      uses: crazy-max/ghaction-import-gpg@111c56156bcc6918c056dbef52164cfa583dc549
      with:
        gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
    - continue-on-error: true
      name: stage source
      run: "svn co https://dist.apache.org/repos/dist/dev/beam\nmkdir -p beam/${{\
        \ github.event.inputs.RELEASE }}\ncd beam/${{ github.event.inputs.RELEASE\
        \ }}\nRC_DIR=\"beam-${{ github.event.inputs.RELEASE }}-RC${{ github.event.inputs.RC\
        \ }}\"\nRC_ZIP=\"${RC_DIR}.zip\"\nRELEASE_DIR=\"beam-${{ github.event.inputs.RELEASE\
        \ }}\"\nRC_TAG=\"v${{ github.event.inputs.RELEASE }}-RC${{ github.event.inputs.RC\
        \ }}\"\nSOURCE_RELEASE_ZIP=\"apache-beam-${{ github.event.inputs.RELEASE }}-source-release.zip\"\
        \n  # Check whether there is an existing dist dir\nif (svn ls \"${SOURCE_RELEASE_ZIP}\"\
        ); then\n  echo \"Removing existing ${SOURCE_RELEASE_ZIP}.\"\n  svn delete\
        \ \"${SOURCE_RELEASE_ZIP}\"\nfi\n\necho \"Downloading: https://github.com/apache/beam/archive/${RC_TAG}.zip\"\
        \nwget https://github.com/apache/beam/archive/${RC_TAG}.zip  -O \"${RC_ZIP}\"\
        \n\nunzip \"$RC_ZIP\"\nrm \"$RC_ZIP\"\nmv \"$RC_DIR\" \"$RELEASE_DIR\"\nzip\
        \ -r \"${SOURCE_RELEASE_ZIP}\" \"$RELEASE_DIR\"\nrm -r \"$RELEASE_DIR\"\n\n\
        echo \"----Signing Source Release ${SOURCE_RELEASE_ZIP}-----\"\ngpg --local-user\
        \ \"${{steps.import_gpg.outputs.name}}\" --armor --batch --yes --detach-sig\
        \ \"${SOURCE_RELEASE_ZIP}\"\n\necho \"----Creating Hash Value for ${SOURCE_RELEASE_ZIP}----\"\
        \nsha512sum ${SOURCE_RELEASE_ZIP} > ${SOURCE_RELEASE_ZIP}.sha512\n\nsvn add\
        \ --force .\nsvn status\nsvn commit -m \"Staging Java artifacts for Apache\
        \ Beam ${{ github.event.inputs.RELEASE }} RC${{ github.event.inputs.RC }}\"\
        \ --non-interactive --username \"${{ github.event.inputs.APACHE_ID }}\" --password\
        \ \"${{ github.event.inputs.APACHE_PASSWORD }}\"\n"
  stage_python_artifacts:
    if: ${{ fromJson(github.event.inputs.STAGE).python_artifacts == 'yes'}}
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      name: Checkout
      uses: actions/checkout@v4
    - continue-on-error: true
      name: Mask Apache Password
      run: '# Workaround for Actions bug - https://github.com/actions/runner/issues/643

        APACHE_PASS=$(jq -r ''.inputs.APACHE_PASSWORD'' $GITHUB_EVENT_PATH)

        echo "::add-mask::$APACHE_PASS"

        '
    - continue-on-error: true
      name: Mask apache id/password
      run: "if [ \"${{ github.event.inputs.APACHE_ID }}\" == \"\" ]\nthen\n  echo\
        \ \"Must provide an apache id to stage artifacts to https://dist.apache.org/repos/dist/dev/beam/\"\
        \nfi\nif [ \"${{ github.event.inputs.APACHE_PASSWORD }}\" == \"\" ]\nthen\n\
        \  echo \"Must provide an apache password to stage artifacts to https://dist.apache.org/repos/dist/dev/beam/\"\
        \nfi\n"
    - continue-on-error: true
      name: Setup environment
      uses: ./.github/actions/setup-environment-action
      with:
        python-version: default
    - continue-on-error: true
      id: import_gpg
      name: Import GPG key
      uses: crazy-max/ghaction-import-gpg@111c56156bcc6918c056dbef52164cfa583dc549
      with:
        gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
    - continue-on-error: true
      name: Install dependencies
      run: 'pip install python-dateutil

        pip install requests

        '
    - continue-on-error: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GIT_REPO_BASE_URL: https://github.com/apache/beam
        RC_TAG: v${{ github.event.inputs.RELEASE }}-RC${{ github.event.inputs.RC }}
        RELEASE: ${{ github.event.inputs.RELEASE }}
        RELEASE_DIR: beam/${{ github.event.inputs.RELEASE }}
        SCRIPT_DIR: release/src/main/scripts
        SVN_ARTIFACTS_DIR: beam/${{ github.event.inputs.RELEASE }}/python
      name: stage python artifacts
      run: "svn co https://dist.apache.org/repos/dist/dev/beam\nmkdir -p \"${SVN_ARTIFACTS_DIR}\"\
        \n\ngit fetch --all --tags --prune\nRELEASE_COMMIT=$(git rev-list -n 1 \"\
        tags/${RC_TAG}\")\n\npython \"${SCRIPT_DIR}/download_github_actions_artifacts.py\"\
        \ \\\n  --github-token-var GITHUB_TOKEN \\\n  --repo-url \"apache/beam\" \\\
        \n  --rc-tag \"${RC_TAG}\" \\\n  --release-commit \"${RELEASE_COMMIT}\" \\\
        \n  --artifacts_dir \"${RELEASE_DIR}/python\" \\\n  --yes True\n\ncd \"${RELEASE_DIR}\"\
        /python\nls\n\necho \"------Checking Hash Value for apache_beam-${RELEASE}.tar.gz-----\"\
        \nsha512sum -c \"apache_beam-${RELEASE}.tar.gz.sha512\"\n\necho \"------Signing\
        \ Source Release apache_beam-${RELEASE}.tar.gz------\"\ngpg --local-user \"\
        ${{steps.import_gpg.outputs.name}}\" --armor --detach-sig \"apache_beam-${RELEASE}.tar.gz\"\
        \n\nfor artifact in *.whl; do\n  echo \"----------Checking Hash Value for\
        \ ${artifact} wheel-----------\"\n  sha512sum -c \"${artifact}.sha512\"\n\
        done\n\nfor artifact in *.whl; do\n  echo \"------------------Signing ${artifact}\
        \ wheel-------------------\"\n  gpg --local-user \"${{steps.import_gpg.outputs.name}}\"\
        \ --armor --batch --yes --detach-sig \"${artifact}\"\ndone\n\ncd ..\nsvn add\
        \ --force python\nsvn status\nsvn commit -m \"Staging Python artifacts for\
        \ Apache Beam ${RELEASE} RC${RC_NUM}\" --non-interactive --username \"${{\
        \ github.event.inputs.APACHE_ID }}\" --password \"${{ github.event.inputs.APACHE_PASSWORD\
        \ }}\"\n"
name: build_release_candidate
on:
  repository_dispatch:
    types: trigger-ga___build_release_candidate.yml
