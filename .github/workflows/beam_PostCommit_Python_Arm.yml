concurrency:
  cancel-in-progress: true
  group: ${{ github.workflow }} @ ${{ github.event.issue.number || github.sha || github.head_ref
    || github.ref }}-${{ github.event.schedule || github.event.comment.id || github.event.sender.login
    }}
env:
  DEVELOCITY_ACCESS_KEY: ${{ secrets.GE_ACCESS_TOKEN }}
  GRADLE_ENTERPRISE_CACHE_PASSWORD: ${{ secrets.GE_CACHE_PASSWORD }}
  GRADLE_ENTERPRISE_CACHE_USERNAME: ${{ secrets.GE_CACHE_USERNAME }}
jobs:
  beam_PostCommit_Python_Arm:
    if: 'github.event_name == ''workflow_dispatch'' ||

      github.event_name == ''pull_request_target'' ||

      (github.event_name == ''schedule'' && github.repository == ''apache/beam'')
      ||

      startsWith(github.event.comment.body, ''Run Python PostCommit Arm'')

      '
    name: ${{ matrix.job_name }} (${{ matrix.job_phrase }} ${{ matrix.python_version
      }})
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      uses: actions/checkout@v4
    - continue-on-error: true
      name: Setup repository
      uses: ./.github/actions/setup-action
      with:
        comment_phrase: ${{ matrix.job_phrase }} ${{ matrix.python_version }}
        github_job: ${{ matrix.job_name }} (${{ matrix.job_phrase }} ${{ matrix.python_version
          }})
        github_token: ${{ secrets.GITHUB_TOKEN }}
    - continue-on-error: true
      name: Setup environment
      uses: ./.github/actions/setup-environment-action
      with:
        python-version: ${{ matrix.python_version }}
    - continue-on-error: true
      name: Install docker compose
      run: 'sudo curl -L https://github.com/docker/compose/releases/download/1.22.0/docker-compose-$(uname
        -s)-$(uname -m) -o /usr/local/bin/docker-compose

        sudo chmod +x /usr/local/bin/docker-compose

        '
    - continue-on-error: true
      name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    - continue-on-error: true
      name: GCloud Docker credential helper
      run: 'gcloud auth configure-docker us.gcr.io

        '
    - continue-on-error: true
      id: set_py_ver_clean
      name: Set PY_VER_CLEAN
      run: 'PY_VER=${{ matrix.python_version }}

        PY_VER_CLEAN=${PY_VER//.}

        echo "py_ver_clean=$PY_VER_CLEAN" >> $GITHUB_OUTPUT

        '
    - continue-on-error: true
      id: set_tag
      name: Generate TAG unique variable based on timestamp
      run: echo "TAG=$(date +'%Y%m%d-%H%M%S%N')" >> $GITHUB_OUTPUT
    - continue-on-error: true
      env:
        MULTIARCH_TAG: ${{ steps.set_tag.outputs.TAG }}
        USER: github-actions
      name: run PostCommit Python ${{ matrix.python_version }} script
      uses: ./.github/actions/gradle-command-self-hosted-action
      with:
        arguments: '-PuseWheelDistribution \

          -PpythonVersion=${{ matrix.python_version }} \

          -Pcontainer-architecture-list=arm64,amd64 \

          -Pdocker-repository-root=us.gcr.io/apache-beam-testing/github-actions \

          -Pdocker-tag=${{ steps.set_tag.outputs.TAG }} \

          -Ppush-containers \

          '
        gradle-command: :sdks:python:test-suites:dataflow:py${{steps.set_py_ver_clean.outputs.py_ver_clean}}:postCommitArmIT
    - continue-on-error: true
      if: failure()
      name: Archive Python Test Results
      uses: actions/upload-artifact@v4
      with:
        name: Python ${{ matrix.python_version }} Test Results
        path: '**/pytest*.xml'
    - continue-on-error: true
      if: always()
      name: Publish Python Test Results
      uses: EnricoMi/publish-unit-test-result-action@v2
      with:
        comment_mode: ${{ github.event_name == 'issue_comment'  && 'always' || 'off'
          }}
        commit: ${{ env.prsha || env.GITHUB_SHA }}
        files: '**/pytest*.xml'
    strategy:
      fail-fast: false
      matrix:
        job_name:
        - beam_PostCommit_Python_Arm
        job_phrase:
        - Run Python PostCommit Arm
        python_version:
        - '3.8'
        - '3.9'
        - '3.10'
        - '3.11'
        - '3.12'
    timeout-minutes: 240
name: PostCommit Python Arm
on:
  repository_dispatch:
    types: trigger-ga___beam_PostCommit_Python_Arm.yml
permissions:
  actions: write
  checks: write
  contents: read
  deployments: read
  discussions: read
  id-token: none
  issues: write
  packages: read
  pages: read
  pull-requests: write
  repository-projects: read
  security-events: read
  statuses: read
