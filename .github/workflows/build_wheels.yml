concurrency:
  cancel-in-progress: true
  group: ${{ github.workflow }} @ ${{ github.event.issue.number || github.event.pull_request.head.label
    || github.sha || github.head_ref || github.ref }}-${{ github.event.schedule ||
    github.event.comment.id || github.event.sender.login}}
env:
  GCP_PATH: gs://${{ secrets.GCP_PYTHON_WHEELS_BUCKET }}/${GITHUB_REF##*/}/${GITHUB_SHA}-${GITHUB_RUN_ID}/
jobs:
  branch_repo_nightly:
    if: github.repository_owner == 'apache' && github.event_name == 'schedule'
    name: Branch repo nightly
    needs:
    - build_source
    - build_wheels
    permissions:
      contents: write
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      name: Checkout code on master branch
      uses: actions/checkout@v4
      with:
        persist-credentials: false
        submodules: recursive
    - continue-on-error: true
      name: Branch commit
      run: 'BRANCH_NAME=${GITHUB_REF##*/}

        echo "Updating nightly-${BRANCH_NAME}"

        git branch -f nightly-${BRANCH_NAME} HEAD

        '
    - continue-on-error: true
      name: Push branch
      uses: ./.github/actions/github-push-action
      with:
        branch: nightly-${{ github.ref }}
        force: true
        github_token: ${{ secrets.GITHUB_TOKEN }}
    timeout-minutes: 60
  build_source:
    name: Build python source distribution
    outputs:
      is_rc: ${{ steps.is_rc.outputs.is_rc }}
      rc_num: ${{ steps.get_rc_version.outputs.RC_NUM }}
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      name: Checkout code
      uses: actions/checkout@v4
    - continue-on-error: true
      name: Install python
      uses: actions/setup-python@v5
      with:
        python-version: 3.8
    - continue-on-error: true
      id: get_tag
      name: Get tag
      run: 'echo "TAG=${GITHUB_REF#refs/*/}" >> $GITHUB_OUTPUT

        '
    - continue-on-error: true
      id: is_rc
      name: Check whether an -RC tag was applied to the commit.
      run: 'echo ${{ steps.get_tag.outputs.TAG }} > temp

        OUTPUT=$( if  grep -e ''-RC.'' -q temp; then echo 1; else echo 0; fi)

        echo "is_rc=$OUTPUT" >> $GITHUB_OUTPUT

        '
    - continue-on-error: true
      id: get_rc_version
      if: steps.is_rc.outputs.is_rc == 1
      name: Get RELEASE_VERSION and RC_NUM
      run: 'RC_NUM=$(sed -n "s/^.*-RC\([0-9]*\)/\1/p" temp)

        RELEASE_VERSION=$(sed -n "s/^v\(.*\)-RC[0-9]/\1/p" temp)

        echo "RC_NUM=$RC_NUM" >> $GITHUB_OUTPUT

        echo "RELEASE_VERSION=$RELEASE_VERSION" >> $GITHUB_OUTPUT

        '
    - continue-on-error: true
      name: Build source
      run: pip install -U build && python -m build --sdist
      working-directory: ./sdks/python
    - continue-on-error: true
      name: Add checksums
      run: 'file=$(ls | grep .tar.gz | head -n 1)

        sha512sum $file > ${file}.sha512

        '
      working-directory: ./sdks/python/dist
    - continue-on-error: true
      name: Unzip source
      run: tar -xzvf dist/$(ls dist | grep .tar.gz | head -n 1)
      working-directory: ./sdks/python
    - continue-on-error: true
      name: Rename source directory
      run: mv $(ls | grep "apache-beam-\|apache_beam-") apache-beam-source
      working-directory: ./sdks/python
    - continue-on-error: true
      name: Upload source as artifact
      uses: actions/upload-artifact@v3
      with:
        name: source
        path: sdks/python/apache-beam-source
    - continue-on-error: true
      name: Upload compressed sources as artifacts
      uses: actions/upload-artifact@v3
      with:
        name: source_zip
        path: sdks/python/dist
    - continue-on-error: true
      if: steps.is_rc.outputs.is_rc == 1
      name: Clear dist
      run: 'rm -r ./dist

        rm -rd apache-beam-source

        '
      working-directory: ./sdks/python
    - continue-on-error: true
      if: steps.is_rc.outputs.is_rc == 1
      name: Rewrite SDK version to include RC number
      run: 'RELEASE_VERSION=${{ steps.get_rc_version.outputs.RELEASE_VERSION }}

        RC_NUM=${{ steps.get_rc_version.outputs.RC_NUM }}

        sed -i -e "s/${RELEASE_VERSION}/${RELEASE_VERSION}rc${RC_NUM}/g" apache_beam/version.py

        '
      working-directory: ./sdks/python
    - continue-on-error: true
      if: steps.is_rc.outputs.is_rc == 1
      name: Build RC source
      run: pip install -U build && python -m build --sdist
      working-directory: ./sdks/python
    - continue-on-error: true
      if: steps.is_rc.outputs.is_rc == 1
      name: Add RC checksums
      run: 'file=$(ls | grep .tar.gz | head -n 1)

        sha512sum $file > ${file}.sha512

        '
      working-directory: ./sdks/python/dist
    - continue-on-error: true
      if: steps.is_rc.outputs.is_rc == 1
      name: Unzip RC source
      run: tar -xzvf dist/$(ls dist | grep .tar.gz | head -n 1)
      working-directory: ./sdks/python
    - continue-on-error: true
      if: steps.is_rc.outputs.is_rc == 1
      name: Rename RC source directory
      run: mv $(ls | grep "apache-beam-\|apache_beam-") apache-beam-source-rc
      working-directory: ./sdks/python
    - continue-on-error: true
      if: steps.is_rc.outputs.is_rc == 1
      name: Upload RC source as artifact
      uses: actions/upload-artifact@v3
      with:
        name: source_rc${{ steps.get_rc_version.outputs.RC_NUM }}
        path: sdks/python/apache-beam-source-rc
    - continue-on-error: true
      if: steps.is_rc.outputs.is_rc == 1
      name: Upload compressed RC sources as artifacts
      uses: actions/upload-artifact@v3
      with:
        name: source_zip_rc${{ steps.get_rc_version.outputs.RC_NUM }}
        path: sdks/python/dist
  build_wheels:
    env:
      CIBW_ARCHS_LINUX: ${{matrix.arch}}
    name: Build python wheels on ${{matrix.arch}} for ${{ matrix.os_python.os }}
    needs:
    - check_env_variables
    - build_source
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      name: Download python source distribution from artifacts
      uses: actions/download-artifact@v3
      with:
        name: source
        path: apache-beam-source
    - continue-on-error: true
      if: ${{ needs.build_source.outputs.is_rc == 1 }}
      name: Download Python SDK RC source distribution from artifacts
      uses: actions/download-artifact@v3
      with:
        name: source_rc${{ needs.build_source.outputs.rc_num }}
        path: apache-beam-source-rc
    - continue-on-error: true
      name: Install Python
      uses: actions/setup-python@v5
      with:
        python-version: 3.8
    - continue-on-error: true
      if: ${{matrix.arch == 'aarch64'}}
      name: Set up QEMU
      uses: docker/setup-qemu-action@v1
    - continue-on-error: true
      name: Install cibuildwheel
      run: pip install cibuildwheel==2.17.0 setuptools
    - continue-on-error: true
      env:
        CIBW_BEFORE_BUILD: pip install cython==0.29.36 numpy --config-settings=setup-args="-Dallow-noblas=true"
          && pip install --upgrade setuptools
        CIBW_BUILD: ${{ matrix.os_python.python }}
        CIBW_SKIP: '*-musllinux_*'
      name: Build wheel
      run: cibuildwheel --print-build-identifiers && cibuildwheel --output-dir wheelhouse
      shell: bash
      working-directory: apache-beam-source
    - continue-on-error: true
      if: startsWith(matrix.os_python.os, 'macos')
      name: install sha512sum on MacOS
      run: brew install coreutils
    - continue-on-error: true
      name: Add checksums
      run: "for file in *.whl; do\n  sha512sum $file > ${file}.sha512\ndone\n"
      shell: bash
      working-directory: apache-beam-source/wheelhouse/
    - continue-on-error: true
      name: Upload wheels as artifacts
      uses: actions/upload-artifact@v3
      with:
        name: wheelhouse-${{ matrix.os_python.os }}${{ (matrix.arch == 'aarch64' &&
          '-aarch64') || '' }}
        path: apache-beam-source/wheelhouse/
    - continue-on-error: true
      env:
        CIBW_BEFORE_BUILD: pip install cython==0.29.36 numpy --config-settings=setup-args="-Dallow-noblas=true"
          && pip install --upgrade setuptools
        CIBW_BUILD: ${{ matrix.os_python.python }}
        CIBW_SKIP: '*-musllinux_*'
      if: ${{ needs.build_source.outputs.is_rc == 1 }}
      name: Build RC wheels
      run: cibuildwheel --print-build-identifiers && cibuildwheel --output-dir wheelhouse
      shell: bash
      working-directory: apache-beam-source-rc
    - continue-on-error: true
      if: ${{ needs.build_source.outputs.is_rc == 1 }}
      name: Add RC checksums
      run: "for file in *.whl; do\n  sha512sum $file > ${file}.sha512\ndone\n"
      shell: bash
      working-directory: apache-beam-source-rc/wheelhouse/
    - continue-on-error: true
      if: ${{ needs.build_source.outputs.is_rc == 1 }}
      name: Upload RC wheels as artifacts
      uses: actions/upload-artifact@v3
      with:
        name: wheelhouse-rc${{ needs.build_source.outputs.rc_num }}-${{ matrix.os_python.os
          }}${{ (matrix.arch == 'aarch64' && '-aarch64') || '' }}
        path: apache-beam-source-rc/wheelhouse/
    strategy:
      matrix:
        arch:
        - auto
        include:
        - arch: aarch64
          os_python:
            os: ubuntu-latest
            python: ${{ needs.check_env_variables.outputs.py-versions-test }}
        os_python:
        - os: ubuntu-latest
          python: ${{ needs.check_env_variables.outputs.py-versions-full }}
        - os: macos-13
          python: ${{ needs.check_env_variables.outputs.py-versions-test }}
        - os: windows-latest
          python: ${{ needs.check_env_variables.outputs.py-versions-test }}
  check_env_variables:
    env:
      EVENT_NAME: ${{ github.event_name }}
      PY_VERSIONS_FULL: cp38-* cp39-* cp310-* cp311-* cp312-*
    name: Check environment variables
    outputs:
      gcp-variables-set: ${{ steps.check_gcp_variables.outputs.gcp-variables-set }}
      py-versions-full: ${{ steps.set-py-versions.outputs.py-versions-full }}
      py-versions-test: ${{ steps.set-py-versions.outputs.py-versions-test }}
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      uses: actions/checkout@v4
    - continue-on-error: true
      env:
        GCP_PROJECT_ID: not-needed-here
        GCP_PYTHON_WHEELS_BUCKET: ${{ secrets.GCP_PYTHON_WHEELS_BUCKET }}
        GCP_REGION: not-needed-here
        GCP_SA_EMAIL: ${{ secrets.GCP_SA_EMAIL }}
        GCP_SA_KEY: ${{ secrets.GCP_SA_KEY }}
        GCP_TESTING_BUCKET: not-needed-here
      id: check_gcp_variables
      name: Check are GCP variables set
      run: ./scripts/ci/ci_check_are_gcp_variables_set.sh
    - continue-on-error: true
      id: set-py-versions
      name: Set Python Versions for different environments
      run: "set -xeu\nif [ $EVENT_NAME == \"pull_request\" ]; then\n  # run highest\
        \ supported version on pull request.\n  echo \"py-versions-test=${PY_VERSIONS_FULL##*\
        \ }\" >> $GITHUB_OUTPUT\nelse\n  # run full version for push and cron jobs.\n\
        \  echo \"py-versions-test=$PY_VERSIONS_FULL\" >> $GITHUB_OUTPUT\nfi\n# Output\
        \ full set of versions so that we can test all languages on pull requests\
        \ for certain platforms.\necho \"py-versions-full=$PY_VERSIONS_FULL\" >> $GITHUB_OUTPUT\n"
    timeout-minutes: 5
  list_files_on_gcs:
    if: needs.check_env_variables.outputs.gcp-variables-set == 'true' && github.event_name
      != 'pull_request'
    name: List files on Google Cloud Storage Bucket
    needs:
    - upload_wheels_to_gcs
    - check_env_variables
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      name: Authenticate on GCP
      uses: google-github-actions/setup-gcloud@v0
      with:
        service_account_email: ${{ secrets.GCP_SA_EMAIL }}
        service_account_key: ${{ secrets.GCP_SA_KEY }}
    - continue-on-error: true
      name: List file on Google Cloud Storage Bucket
      run: gsutil ls "${{ env.GCP_PATH }}*"
  prepare_gcs:
    if: needs.check_env_variables.outputs.gcp-variables-set == 'true' && github.event_name
      != 'pull_request'
    name: Prepare GCS
    needs:
    - build_source
    - check_env_variables
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      name: Authenticate on GCP
      uses: google-github-actions/setup-gcloud@v0
      with:
        service_account_email: ${{ secrets.GCP_SA_EMAIL }}
        service_account_key: ${{ secrets.GCP_SA_KEY }}
    - continue-on-error: true
      name: Remove existing files on GCS bucket
      run: gsutil rm -r ${{ env.GCP_PATH }} || true
  upload_source_to_gcs:
    if: needs.check_env_variables.outputs.gcp-variables-set == 'true'
    name: Upload python source distribution to GCS bucket
    needs:
    - prepare_gcs
    - check_env_variables
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      name: Download compressed sources from artifacts
      uses: actions/download-artifact@v3
      with:
        name: source_zip
        path: source/
    - continue-on-error: true
      name: Authenticate on GCP
      uses: google-github-actions/setup-gcloud@v0
      with:
        service_account_email: ${{ secrets.GCP_SA_EMAIL }}
        service_account_key: ${{ secrets.GCP_SA_KEY }}
    - continue-on-error: true
      name: Copy sources to GCS bucket
      run: gsutil cp -r -a public-read source/* ${{ env.GCP_PATH }}
  upload_wheels_to_gcs:
    if: needs.check_env_variables.outputs.gcp-variables-set == 'true' && github.event_name
      != 'pull_request'
    name: Upload wheels to GCS bucket
    needs:
    - build_wheels
    - check_env_variables
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      name: Download wheels from artifacts
      uses: actions/download-artifact@v3
      with:
        name: wheelhouse-${{ matrix.os }}${{ (matrix.arch == 'aarch64' && '-aarch64')
          || '' }}
        path: wheelhouse/
    - continue-on-error: true
      name: Authenticate on GCP
      uses: google-github-actions/setup-gcloud@v0
      with:
        service_account_email: ${{ secrets.GCP_SA_EMAIL }}
        service_account_key: ${{ secrets.GCP_SA_KEY }}
    - continue-on-error: true
      name: Copy wheels to GCS bucket
      run: gsutil cp -r -a public-read wheelhouse/* ${{ env.GCP_PATH }}
    - continue-on-error: true
      name: Create github action information file on GCS bucket
      run: 'cat > github_action_info <<EOF

        GITHUB_WORKFLOW=$GITHUB_WORKFLOW

        GITHUB_RUN_ID=$GITHUB_RUN_ID

        GITHUB_RUN_NUMBER=$GITHUB_RUN_NUMBER

        GITHUB_ACTION=$GITHUB_ACTION

        GITHUB_ACTOR=$GITHUB_ACTOR

        GITHUB_REPOSITORY=$GITHUB_REPOSITORY

        GITHUB_EVENT_NAME=$GITHUB_EVENT_NAME

        GITHUB_SHA=$GITHUB_SHA

        GITHUB_REF=$GITHUB_REF

        # only for forked repositiories

        GITHUB_HEAD_REF=$GITHUB_HEAD_REF

        GITHUB_BASE_REF=$GITHUB_BASE_REF

        EOF

        echo $(cat github_action_info)

        gsutil cp -a public-read github_action_info ${{ env.GCP_PATH }}

        '
    - continue-on-error: true
      name: Upload GitHub event file to GCS bucket
      run: gsutil cp -a public-read ${GITHUB_EVENT_PATH} ${{ env.GCP_PATH }}
    strategy:
      matrix:
        arch:
        - auto
        include:
        - arch: aarch64
          os: ubuntu-latest
        os:
        - ubuntu-latest
        - macos-13
        - windows-latest
name: Build python source distribution and wheels
on:
  repository_dispatch:
    types: trigger-ga___build_wheels.yml
